// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as networksecurityModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.NetworkSecurityClient', () => {
    it('has servicePath', () => {
        const servicePath = networksecurityModule.v1beta1.NetworkSecurityClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = networksecurityModule.v1beta1.NetworkSecurityClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = networksecurityModule.v1beta1.NetworkSecurityClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.networkSecurityStub, undefined);
        await client.initialize();
        assert(client.networkSecurityStub);
    });

    it('has close method', () => {
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getAuthorizationPolicy', () => {
        it('invokes getAuthorizationPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy());
            client.innerApiCalls.getAuthorizationPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getAuthorizationPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAuthorizationPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy());
            client.innerApiCalls.getAuthorizationPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAuthorizationPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAuthorizationPolicy with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAuthorizationPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAuthorizationPolicy(request), expectedError);
            assert((client.innerApiCalls.getAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServerTlsPolicy', () => {
        it('invokes getServerTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy());
            client.innerApiCalls.getServerTlsPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getServerTlsPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServerTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy());
            client.innerApiCalls.getServerTlsPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServerTlsPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServerTlsPolicy with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServerTlsPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServerTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.getServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getClientTlsPolicy', () => {
        it('invokes getClientTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy());
            client.innerApiCalls.getClientTlsPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getClientTlsPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getClientTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy());
            client.innerApiCalls.getClientTlsPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getClientTlsPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getClientTlsPolicy with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getClientTlsPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getClientTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.getClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createAuthorizationPolicy', () => {
        it('invokes createAuthorizationPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createAuthorizationPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAuthorizationPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAuthorizationPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createAuthorizationPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createAuthorizationPolicy(request), expectedError);
            assert((client.innerApiCalls.createAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAuthorizationPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createAuthorizationPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateAuthorizationPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateAuthorizationPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateAuthorizationPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateAuthorizationPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateAuthorizationPolicy', () => {
        it('invokes updateAuthorizationPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest());
            request.authorizationPolicy = {};
            request.authorizationPolicy.name = '';
            const expectedHeaderRequestParams = "authorization_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateAuthorizationPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAuthorizationPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest());
            request.authorizationPolicy = {};
            request.authorizationPolicy.name = '';
            const expectedHeaderRequestParams = "authorization_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAuthorizationPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateAuthorizationPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest());
            request.authorizationPolicy = {};
            request.authorizationPolicy.name = '';
            const expectedHeaderRequestParams = "authorization_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateAuthorizationPolicy(request), expectedError);
            assert((client.innerApiCalls.updateAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAuthorizationPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest());
            request.authorizationPolicy = {};
            request.authorizationPolicy.name = '';
            const expectedHeaderRequestParams = "authorization_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateAuthorizationPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateAuthorizationPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateAuthorizationPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateAuthorizationPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateAuthorizationPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteAuthorizationPolicy', () => {
        it('invokes deleteAuthorizationPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteAuthorizationPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAuthorizationPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAuthorizationPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAuthorizationPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteAuthorizationPolicy(request), expectedError);
            assert((client.innerApiCalls.deleteAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAuthorizationPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteAuthorizationPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteAuthorizationPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteAuthorizationPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteAuthorizationPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteAuthorizationPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteAuthorizationPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createServerTlsPolicy', () => {
        it('invokes createServerTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createServerTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createServerTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServerTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createServerTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createServerTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createServerTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServerTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createServerTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.createServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServerTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServerTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createServerTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateServerTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateServerTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateServerTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateServerTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateServerTlsPolicy', () => {
        it('invokes updateServerTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest());
            request.serverTlsPolicy = {};
            request.serverTlsPolicy.name = '';
            const expectedHeaderRequestParams = "server_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateServerTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateServerTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest());
            request.serverTlsPolicy = {};
            request.serverTlsPolicy.name = '';
            const expectedHeaderRequestParams = "server_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateServerTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateServerTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest());
            request.serverTlsPolicy = {};
            request.serverTlsPolicy.name = '';
            const expectedHeaderRequestParams = "server_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateServerTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.updateServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateServerTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest());
            request.serverTlsPolicy = {};
            request.serverTlsPolicy.name = '';
            const expectedHeaderRequestParams = "server_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateServerTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateServerTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateServerTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateServerTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateServerTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteServerTlsPolicy', () => {
        it('invokes deleteServerTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteServerTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteServerTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteServerTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteServerTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteServerTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.deleteServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteServerTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteServerTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteServerTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteServerTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteServerTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteServerTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteServerTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createClientTlsPolicy', () => {
        it('invokes createClientTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createClientTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createClientTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createClientTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createClientTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createClientTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createClientTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createClientTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createClientTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.createClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createClientTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createClientTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createClientTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateClientTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateClientTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateClientTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateClientTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateClientTlsPolicy', () => {
        it('invokes updateClientTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest());
            request.clientTlsPolicy = {};
            request.clientTlsPolicy.name = '';
            const expectedHeaderRequestParams = "client_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateClientTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateClientTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest());
            request.clientTlsPolicy = {};
            request.clientTlsPolicy.name = '';
            const expectedHeaderRequestParams = "client_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateClientTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateClientTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest());
            request.clientTlsPolicy = {};
            request.clientTlsPolicy.name = '';
            const expectedHeaderRequestParams = "client_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateClientTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.updateClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateClientTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest());
            request.clientTlsPolicy = {};
            request.clientTlsPolicy.name = '';
            const expectedHeaderRequestParams = "client_tls_policy.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateClientTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateClientTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateClientTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateClientTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateClientTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteClientTlsPolicy', () => {
        it('invokes deleteClientTlsPolicy without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteClientTlsPolicy(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteClientTlsPolicy without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteClientTlsPolicy(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networksecurity.v1beta1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteClientTlsPolicy with call error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteClientTlsPolicy(request), expectedError);
            assert((client.innerApiCalls.deleteClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteClientTlsPolicy with LRO error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteClientTlsPolicy(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteClientTlsPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteClientTlsPolicyProgress without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteClientTlsPolicyProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteClientTlsPolicyProgress with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteClientTlsPolicyProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listAuthorizationPolicies', () => {
        it('invokes listAuthorizationPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
            ];
            client.innerApiCalls.listAuthorizationPolicies = stubSimpleCall(expectedResponse);
            const [response] = await client.listAuthorizationPolicies(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAuthorizationPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAuthorizationPolicies without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
            ];
            client.innerApiCalls.listAuthorizationPolicies = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAuthorizationPolicies(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAuthorizationPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listAuthorizationPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listAuthorizationPolicies = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAuthorizationPolicies(request), expectedError);
            assert((client.innerApiCalls.listAuthorizationPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAuthorizationPoliciesStream without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
            ];
            client.descriptors.page.listAuthorizationPolicies.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAuthorizationPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAuthorizationPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAuthorizationPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listAuthorizationPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listAuthorizationPoliciesStream with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listAuthorizationPolicies.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAuthorizationPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAuthorizationPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAuthorizationPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listAuthorizationPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAuthorizationPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()),
            ];
            client.descriptors.page.listAuthorizationPolicies.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[] = [];
            const iterable = client.listAuthorizationPoliciesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAuthorizationPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAuthorizationPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAuthorizationPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listAuthorizationPolicies.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAuthorizationPoliciesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAuthorizationPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAuthorizationPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listServerTlsPolicies', () => {
        it('invokes listServerTlsPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
            ];
            client.innerApiCalls.listServerTlsPolicies = stubSimpleCall(expectedResponse);
            const [response] = await client.listServerTlsPolicies(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServerTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServerTlsPolicies without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
            ];
            client.innerApiCalls.listServerTlsPolicies = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServerTlsPolicies(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServerTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServerTlsPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServerTlsPolicies = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServerTlsPolicies(request), expectedError);
            assert((client.innerApiCalls.listServerTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServerTlsPoliciesStream without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
            ];
            client.descriptors.page.listServerTlsPolicies.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServerTlsPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServerTlsPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServerTlsPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listServerTlsPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listServerTlsPoliciesStream with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listServerTlsPolicies.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServerTlsPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServerTlsPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServerTlsPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listServerTlsPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServerTlsPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()),
            ];
            client.descriptors.page.listServerTlsPolicies.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[] = [];
            const iterable = client.listServerTlsPoliciesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServerTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServerTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServerTlsPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listServerTlsPolicies.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServerTlsPoliciesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServerTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServerTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listClientTlsPolicies', () => {
        it('invokes listClientTlsPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
            ];
            client.innerApiCalls.listClientTlsPolicies = stubSimpleCall(expectedResponse);
            const [response] = await client.listClientTlsPolicies(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClientTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listClientTlsPolicies without error using callback', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
            ];
            client.innerApiCalls.listClientTlsPolicies = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listClientTlsPolicies(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClientTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listClientTlsPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listClientTlsPolicies = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listClientTlsPolicies(request), expectedError);
            assert((client.innerApiCalls.listClientTlsPolicies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listClientTlsPoliciesStream without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
            ];
            client.descriptors.page.listClientTlsPolicies.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listClientTlsPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listClientTlsPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClientTlsPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listClientTlsPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listClientTlsPoliciesStream with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listClientTlsPolicies.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listClientTlsPoliciesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy[] = [];
                stream.on('data', (response: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listClientTlsPolicies.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClientTlsPolicies, request));
            assert.strictEqual(
                (client.descriptors.page.listClientTlsPolicies.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listClientTlsPolicies without error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
              generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()),
            ];
            client.descriptors.page.listClientTlsPolicies.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[] = [];
            const iterable = client.listClientTlsPoliciesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listClientTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listClientTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listClientTlsPolicies with error', async () => {
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listClientTlsPolicies.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listClientTlsPoliciesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listClientTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listClientTlsPolicies.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('authorizationPolicy', () => {
            const fakePath = "/rendered/path/authorizationPolicy";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                authorization_policy: "authorizationPolicyValue",
            };
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.authorizationPolicyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.authorizationPolicyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('authorizationPolicyPath', () => {
                const result = client.authorizationPolicyPath("projectValue", "locationValue", "authorizationPolicyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.authorizationPolicyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAuthorizationPolicyName', () => {
                const result = client.matchProjectFromAuthorizationPolicyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.authorizationPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAuthorizationPolicyName', () => {
                const result = client.matchLocationFromAuthorizationPolicyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.authorizationPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAuthorizationPolicyFromAuthorizationPolicyName', () => {
                const result = client.matchAuthorizationPolicyFromAuthorizationPolicyName(fakePath);
                assert.strictEqual(result, "authorizationPolicyValue");
                assert((client.pathTemplates.authorizationPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('clientTlsPolicy', () => {
            const fakePath = "/rendered/path/clientTlsPolicy";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                client_tls_policy: "clientTlsPolicyValue",
            };
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clientTlsPolicyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clientTlsPolicyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clientTlsPolicyPath', () => {
                const result = client.clientTlsPolicyPath("projectValue", "locationValue", "clientTlsPolicyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clientTlsPolicyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClientTlsPolicyName', () => {
                const result = client.matchProjectFromClientTlsPolicyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClientTlsPolicyName', () => {
                const result = client.matchLocationFromClientTlsPolicyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClientTlsPolicyFromClientTlsPolicyName', () => {
                const result = client.matchClientTlsPolicyFromClientTlsPolicyName(fakePath);
                assert.strictEqual(result, "clientTlsPolicyValue");
                assert((client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serverTlsPolicy', () => {
            const fakePath = "/rendered/path/serverTlsPolicy";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                server_tls_policy: "serverTlsPolicyValue",
            };
            const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.serverTlsPolicyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serverTlsPolicyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serverTlsPolicyPath', () => {
                const result = client.serverTlsPolicyPath("projectValue", "locationValue", "serverTlsPolicyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serverTlsPolicyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServerTlsPolicyName', () => {
                const result = client.matchProjectFromServerTlsPolicyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServerTlsPolicyName', () => {
                const result = client.matchLocationFromServerTlsPolicyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServerTlsPolicyFromServerTlsPolicyName', () => {
                const result = client.matchServerTlsPolicyFromServerTlsPolicyName(fakePath);
                assert.strictEqual(result, "serverTlsPolicyValue");
                assert((client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
